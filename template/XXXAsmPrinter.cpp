//===-- __arch__`'AsmPrinter.cpp - __arch__ LLVM assembly writer --------------------===//
//
//                     The ArchC LLVM Backend Generator
//
//   This file was automatically generated from an ArchC description.
//
//===----------------------------------------------------------------------===//
//
// This file contains a printer that converts from our internal representation
// of machine-dependent LLVM code to GAS-format __arch__ assembly language.
// (GAS should also be retargeted by ArchC tools).
//
//===----------------------------------------------------------------------===//

`#define DEBUG_TYPE "'__arch__`-asm-printer"'

`#include "'__arch__`.h"'
`#include "'__arch__`Subtarget.h"'
`#include "'__arch__`InstrInfo.h"'
`#include "'__arch__`TargetMachine.h"'
`#include "'__arch__`MachineFunction.h"'
#include "llvm/Constants.h"
#include "llvm/DerivedTypes.h"
#include "llvm/Module.h"
#include "llvm/CodeGen/AsmPrinter.h"
#include "llvm/CodeGen/MachineFunctionPass.h"
#include "llvm/CodeGen/MachineConstantPool.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineInstr.h"
#include "llvm/Target/TargetAsmInfo.h"
#include "llvm/Target/TargetData.h"
#include "llvm/Target/TargetMachine.h"
#include "llvm/Target/TargetOptions.h"
#include "llvm/Support/Mangler.h"
#include "llvm/ADT/Statistic.h"
#include "llvm/ADT/StringExtras.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Support/MathExtras.h"
#include "llvm/Support/raw_ostream.h"
#include <cctype>
#include <sstream>

using namespace llvm;

STATISTIC(EmittedInsts, "Number of machine instrs printed");

namespace {
  struct VISIBILITY_HIDDEN __arch__`'AsmPrinter : public AsmPrinter {

    const __arch__`'Subtarget *Subtarget;

    __arch__`'AsmPrinter(raw_ostream &O, __arch__`'TargetMachine &TM, 
                   const TargetAsmInfo *T): 
                   AsmPrinter(O, TM, T) {
      Subtarget = &TM.getSubtarget<`'__arch__`'Subtarget>();
      LabelCounter = 0;
      EmitLabel = false;
    }

    virtual const char *getPassName() const {
      return "`'__arch__ Assembly Printer";
    }

    bool PrintAsmOperand(const MachineInstr *MI, unsigned OpNo, 
                         unsigned AsmVariant, const char *ExtraCode);
    void printOperand(const MachineInstr *MI, int opNum);
    int generateNewLabelPostfix();
    int getCurLabelPostfix();
    void printLiteral(const MachineInstr *MI, int opNum);
    void printGlobalValue(const MachineInstr *MI, int opNum);
    void printUnsignedImm(const MachineInstr *MI, int opNum);
    void printMemOperand(const MachineInstr *MI, int opNum, 
                         const char *Modifier = 0);
    void printFCCOperand(const MachineInstr *MI, int opNum, 
                         const char *Modifier = 0);
    void printModuleLevelGV(const GlobalVariable* GVar);
    void printHex32(unsigned int Value);

    const char *emitCurrentABIString(void);
    void emitFunctionStart(MachineFunction &MF);
    void emitFunctionEnd(MachineFunction &MF);
    void emitFrameDirective(MachineFunction &MF);

    bool printInstruction(const MachineInstr *MI);  // autogenerated.
    bool runOnMachineFunction(MachineFunction &F);
    bool doInitialization(Module &M);
    bool doFinalization(Module &M);
    
    bool isNop(const MachineInstr *MI);
    
    int LabelCounter;
    bool EmitLabel;
  };
} // end of anonymous namespace

`#include "'__arch__`GenAsmWriter.inc"'

/// create`'__arch__`'CodePrinterPass - Returns a pass that prints the __arch_in_caps__
/// assembly code for a MachineFunction to the given output stream,
/// using the given target machine description.  This should work
/// regardless of whether the function is in SSA form.
namespace llvm {

`FunctionPass *create'__arch__`'CodePrinterPass(raw_ostream &o,
                                              __arch__`'TargetMachine &tm) 
{
  return new __arch__`'AsmPrinter(o, tm, tm.getTargetAsmInfo());
}

}

bool __arch__`'AsmPrinter::
isNop(const MachineInstr *MI) 
{
__identify_nop__
}

//===----------------------------------------------------------------------===//
// Mask directives
//===----------------------------------------------------------------------===//



// Print a 32 bit hex number with all numbers.
void __arch__`'AsmPrinter::
printHex32(unsigned int Value) 
{
  O << "0x";
  for (int i = 7; i >= 0; i--) 
    O << utohexstr( (Value & (0xF << (i*4))) >> (i*4) );
}

//===----------------------------------------------------------------------===//
// Frame and Set directives
//===----------------------------------------------------------------------===//

/// Emit the directives used by GAS on the start of functions
void __arch__`'AsmPrinter::
emitFunctionStart(MachineFunction &MF)
{
  // Print out the label for the function.
  const Function *F = MF.getFunction();
  SwitchToSection(TAI->SectionForGlobal(F));

  // 2 bits aligned
  EmitAlignment(2, F);

  O << "\t.globl\t"  << CurrentFnName << '\n';
  //O << "\t.ent\t"    << CurrentFnName << '\n';

  printVisibility(CurrentFnName, F->getVisibility());

  if ((TAI->hasDotTypeDotSizeDirective()) )
    O << "\t.type\t"   << CurrentFnName << ", " <<
    "`'__type_char_specifier__`'function\n";

  O << CurrentFnName << ":\n";

  O << '\n';
}

/// Emit the directives used by GAS on the end of functions
void __arch__`'AsmPrinter::
emitFunctionEnd(MachineFunction &MF) 
{
  std::stringstream ss;
  __arch__`'FunctionInfo *FI = 
    MF.getInfo<`'__arch__`'FunctionInfo>();
  ss << getFunctionNumber();
  FI->printGlobalValues(O, Mang, ss.str());
}

/// runOnMachineFunction - This uses the printMachineInstruction()
/// method to print assembly for each instruction.
bool __arch__`'AsmPrinter::
runOnMachineFunction(MachineFunction &MF) 
{
  SetupMachineFunction(MF);

  // Print out constants referenced by the function
  EmitConstantPool(MF.getConstantPool());

  // Print out jump tables referenced by the function
  EmitJumpTableInfo(MF.getJumpTableInfo(), MF);

  O << "\n\n";

  // Emit the function start directives
  emitFunctionStart(MF);

  // Print out code for the function.
  for (MachineFunction::const_iterator I = MF.begin(), E = MF.end();
       I != E; ++I) {

    // Print a label for the basic block.
    if (I != MF.begin()) {
      printBasicBlockLabel(I, true, true);
      O << '\n';
    }

    for (MachineBasicBlock::const_iterator II = I->begin(), E = I->end();
         II != E; ++II) {
      // Print the assembly for the instruction.
      if (EmitLabel && !isNop(II)) {
	EmitLabel = false;
	O << ".NI" << getCurLabelPostfix() << ":\n";
      }
      printInstruction(II);
      ++EmittedInsts;
    }

    // Each Basic Block is separated by a newline
    O << '\n';
  }

  // Emit function end directives
  emitFunctionEnd(MF);

  // We didn't modify anything.
  return false;
}

// Print out an operand for an inline asm expression.
bool __arch__`'AsmPrinter::
PrintAsmOperand(const MachineInstr *MI, unsigned OpNo, 
                unsigned AsmVariant, const char *ExtraCode) 
{
  // Does this asm operand have a single letter operand modifier?
  if (ExtraCode && ExtraCode[0]) 
    return true; // Unknown modifier.

  printOperand(MI, OpNo);
  return false;
}

int __arch__`'AsmPrinter::
generateNewLabelPostfix()
{
  EmitLabel = true;
  return ++LabelCounter;
}

int __arch__`'AsmPrinter::
getCurLabelPostfix()
{
  return LabelCounter;
}

void __arch__`'AsmPrinter::
printLiteral(const MachineInstr *MI, int opNum) 
{
__print_literal__
}

__size_table__

namespace {
std::string
PatchOperandExpression(const std::string& Expression, const std::string &tgt)
{
  std::string result(Expression);
  std::string::size_type i;  
  std::string marker("GVGOESHERE");
  while ((i = result.find(marker)) != std::string::npos) {
    result.replace(i, marker.size(), tgt);  
  }
  return result;
}   
}

void __arch__`'AsmPrinter::
printGlobalValue(const MachineInstr *MI, int opNum) 
{
  const MachineOperand &MO = MI->getOperand (opNum);
  const GlobalValue *GV = MO.getGlobal();
  // Determine if we need special handling
  // FIXME: This is kind of a guess
  //unsigned num = 0;
  //for (unsigned i = 0, e= MI->getNumOperands();i != e; ++i) {
    //if (MI->getOperand(i).getType() == MachineOperand::MO_GlobalAddress ||
      //  MI->getOperand(i).getType() == MachineOperand::MO_Register)
      //num++;
  //}
  // Normal handling 
  if ((TM.getInstrInfo()->get(MI->getOpcode()).isCall())) {
    O << Mang->getValueName(GV);
    return;
  }  
  // Special handling
//  if (TM.getInstrInfo()->get(MI->getOpcode()).OpInfo[opNum].RegClass != 0) {
//    return;
//  }
  // Calculate the PC offset
  const MachineFunction* MF = MI->getParent()->getParent();
  int index = MF->getInfo<`'__arch__`'FunctionInfo>()->getIndex(GV);
  index *= (__wordsize__ /8);
  
  int offset = 0;
  // First preprocessor #if contains code with the following algorithm:
  // Stage1 is trying to find this instruction in the MBB.
  // Stage2 is trying to traverse the pattern and find the use of PC register
  
  // The "#else" case inverts stage1 and stage2, for architecture in which
  // the pattern obtains PC before imm. The generator already chose the
  // correct algorithm if this source was patched.
  
  // Count counts the distance of PC reg. usage to the target, in order to
  // correctly build a pc-relative offset.  
`#if '__global_imm_before_pc__`'
  bool stage1 = true, stage2=false, count = false;
  int curDefReg = -1;
  for (MachineFunction::const_iterator I = MF->begin(), E = MF->end();
       I != E; ++ I) {
    for (MachineBasicBlock::const_iterator I2 = I->begin(), E2 = I->end();
	 I2 != E2; ++I2) {
      if (stage1 && (&(*I2) == MI)) {
	stage2 = true;
	stage1 = false;
	curDefReg = (I2->getOperand(0).isReg()) ? (int) I2->getOperand(0).getReg()
	  : -1;	 
	if (curDefReg == -1) {
	  stage2= false;
	  count = true;
	} else {
	  bool found = false;
__global_address_logic__
	  if (found) {
	    stage2= false;
	    count = true;
	  }
	}
      } // end stage 1
      if (stage2 && (I2->findRegisterUseOperandIdx((unsigned)curDefReg) != -1)) {
	bool found = false;
__global_address_logic__
	if (found) {
	  count = true;
	  stage2 = false;
	} else {
	  curDefReg = (I2->getOperand(0).isReg()) ? (int) I2->getOperand(0).getReg()
	    : -1;	 
	  if (curDefReg == -1) {
	    stage2= false;
	    count = true;
	  }
	}
      } // end stage2
      if (count) {
	offset+= InsnSizeTable[I2->getDesc().Opcode];
      }
    }
  }
#else
  std::set<unsigned> UsedRegs;   
  for (unsigned i = 1, e= MI->getNumOperands();i < e; ++i) {
    if (MI->getOperand(i).getType() == MachineOperand::MO_Register) {
      UsedRegs.insert(MI->getOperand(i).getReg());
    }
  }
  bool count = false, method2 = false;
  const MachineInstr *lastcandidate = 0;
  for (MachineFunction::const_iterator I = MF->begin(), E = MF->end();
       I != E; ++ I) {
    for (MachineBasicBlock::const_iterator I2 = I->begin(), E2 = I->end();
	 I2 != E2; ++I2) {    
      if (!count && (&(*I2) == MI)) {
	method2 = true;
	break;
      }
      if (!count
	  && I2->getNumOperands() > 0
	  && I2->getOperand(0).isReg() 
	  && UsedRegs.count(I2->getOperand(0).getReg()) > 0) {      
	bool found = false;
__global_address_logic__
	if (found) {
	  count = true;
	} else {
	  for (unsigned i = 0, e= I2->getNumOperands();i != e; ++i) {
	    if (I2->getOperand(i).getType() == MachineOperand::MO_Register) {
	      UsedRegs.insert(I2->getOperand(i).getReg());
	    }
	  }
	}
      } else if (!count 
	&& I2->getNumOperands() > 0 
	&& !I2->getOperand(0).isReg()) {
	bool found = false;
__global_address_logic__
	if (found)
	  lastcandidate = &(*I2);
      }
      if (count) {
	offset+= InsnSizeTable[I2->getDesc().Opcode];
      }
    }
    if (method2)
      break;
  }
  // If we cound't find the pcrelative insn traversing use-def chain, then
  // we use the last pcrelative instruction seen since imm-insn (lastcandidate)
  if (method2) {
    assert (lastcandidate != 0 
            && "acgenllvmbe: GlobalAddress pattern is broken");
    count = false;
    for (MachineFunction::const_iterator I = MF->begin(), E = MF->end();
       I != E; ++ I) {
      for (MachineBasicBlock::const_iterator I2 = I->begin(), E2 = I->end();
	 I2 != E2; ++I2) {    
	if (!count && (&(*I2) == lastcandidate)) 
	  count = true;
	if (count) {
	  offset+= InsnSizeTable[I2->getDesc().Opcode];
	}
      }
    }
  }
#endif
  offset = offset / 8;
  offset = offset + index + (__pc_offset__);
  std::stringstream SS;
  SS << offset;  
  O << PatchOperandExpression(MF->getInfo<`'__arch__`'FunctionInfo>()
    ->getOperandExpression((int)MO.getOffset()), SS.str());
}

void __arch__`'AsmPrinter::
printOperand(const MachineInstr *MI, int opNum) 
{
  const MachineOperand &MO = MI->getOperand (opNum);
  const TargetRegisterInfo &RI = *TM.getRegisterInfo();  
  switch (MO.getType()) {
  case MachineOperand::MO_Register:
    if (TargetRegisterInfo::isPhysicalRegister(MO.getReg()))
      O << LowercaseString (RI.get(MO.getReg()).AsmName);
    else
      O << "%reg" << MO.getReg();
    break;

  case MachineOperand::MO_Immediate:
    if (TM.getInstrInfo()->get(MI->getOpcode()).OpInfo[opNum].RegClass != 0)
      printLiteral(MI, opNum);
    else
      O << (int)MO.getImm();
    break;
  case MachineOperand::MO_MachineBasicBlock:
    printBasicBlockLabel(MO.getMBB());
    return;
  case MachineOperand::MO_GlobalAddress:
    {
      printGlobalValue(MI, opNum);
    }
    break;
  case MachineOperand::MO_ExternalSymbol:
    O << MO.getSymbolName();
    break;
  case MachineOperand::MO_ConstantPoolIndex:
    O << TAI->getPrivateGlobalPrefix() << "CPI" << getFunctionNumber() << "_"
      << MO.getIndex();
    break;
  default:
    assert(0 && "unknown operand type"); break;
  }
}

void __arch__`'AsmPrinter::
printUnsignedImm(const MachineInstr *MI, int opNum) 
{
  const MachineOperand &MO = MI->getOperand(opNum);
  if (MO.getType() == MachineOperand::MO_Immediate)
    O << (unsigned short int)MO.getImm();
  else 
    printOperand(MI, opNum);
}

void __arch__`'AsmPrinter::
printMemOperand(const MachineInstr *MI, int opNum, const char *Modifier) 
{
  // when using stack locations for not load/store instructions
  // print the same way as all normal 3 operand instructions.
  if (Modifier && !strcmp(Modifier, "stackloc")) {
    printOperand(MI, opNum+1);
    O << ", ";
    printOperand(MI, opNum);
    return;
  }

  // Load/Store memory operands -- imm($reg) 
  // If PIC target the target is loaded as the 
  // pattern lw $25,%call16($28)
  printOperand(MI, opNum);
  O << "(";
  printOperand(MI, opNum+1);
  O << ")";
}

void __arch__`'AsmPrinter::
printFCCOperand(const MachineInstr *MI, int opNum, const char *Modifier) 
{
  
}

bool __arch__`'AsmPrinter::
doInitialization(Module &M) 
{
  Mang = new Mangler(M, "", TAI->getPrivateGlobalPrefix());

  return false; // success
}

void __arch__`'AsmPrinter::
printModuleLevelGV(const GlobalVariable* GVar) {
  const TargetData *TD = TM.getTargetData();
  //TODO: Which one ArchC generated binutils uses? Log or normal?
  //unsigned Align = TD->getPreferredAlignment(GVar);
  unsigned Align = TD->getPreferredAlignmentLog(GVar);

  if (!GVar->hasInitializer())
    return;   // External global require no code

  // Check to see if this is a special global used by LLVM, if so, emit it.
  if (EmitSpecialLLVMGlobal(GVar))
    return;

  O << "\n\n";
  std::string name = Mang->getValueName(GVar);
  Constant *C = GVar->getInitializer();
  const Type *CTy = C->getType();
  unsigned Size = TD->getTypePaddedSize(CTy);
  const ConstantArray *CVA = dyn_cast<ConstantArray>(C);
  bool printSizeAndType = true;
  
  // A data structure or array is aligned in memory to the largest
  // alignment boundary required by any data type inside it (this matches
  // the Preferred Type Alignment). For integral types, the alignment is
  // the type size.
  //unsigned Align;
  //if (CTy->getTypeID() == Type::IntegerTyID ||
  //    CTy->getTypeID() == Type::VoidTyID) {
  //  assert(!(Size & (Size-1)) && "Alignment is not a power of two!");
  //  Align = Log2_32(Size);
  //} else
  //  Align = TD->getPreferredTypeAlignmentShift(CTy);

  printVisibility(name, GVar->getVisibility());

  SwitchToSection(TAI->SectionForGlobal(GVar));

  if (C->isNullValue() && !GVar->hasSection()) {
    if (!GVar->isThreadLocal() &&
        (GVar->hasLocalLinkage() || GVar->mayBeOverridden())) {
      if (Size == 0) Size = 1;   // .comm Foo, 0 is undefined, avoid it.

      if (GVar->hasLocalLinkage())
        O << "\t.local\t" << name << '\n';

      O << TAI->getCOMMDirective() << name << ',' << Size;
      if (TAI->getCOMMDirectiveTakesAlignment())
        O << ',' << (1 << Align);

      O << '\n';
      return;
    }
  }
  switch (GVar->getLinkage()) {
   case GlobalValue::LinkOnceLinkage:
   case GlobalValue::CommonLinkage:
   case GlobalValue::WeakLinkage:
    // FIXME: Verify correct for weak.
    // Nonnull linkonce -> weak
    O << "\t.weak " << name << '\n';
    break;
   case GlobalValue::AppendingLinkage:
    // FIXME: appending linkage variables should go into a section of their name
    // or something.  For now, just emit them as external.
   case GlobalValue::ExternalLinkage:
    // If external or appending, declare as a global symbol
    O << TAI->getGlobalDirective() << name << '\n';
    // Fall Through
   case GlobalValue::PrivateLinkage:
   case GlobalValue::InternalLinkage:
    if (CVA && CVA->isCString())
      printSizeAndType = false;
    break;
   case GlobalValue::GhostLinkage:
    cerr << "Should not have any unmaterialized functions!\n";
    abort();
   case GlobalValue::DLLImportLinkage:
    cerr << "DLLImport linkage is not supported by this target!\n";
    abort();
   case GlobalValue::DLLExportLinkage:
    cerr << "DLLExport linkage is not supported by this target!\n";
    abort();
   default:
    assert(0 && "Unknown linkage type!");
  }

  EmitAlignment(Align, GVar);

  if (TAI->hasDotTypeDotSizeDirective() && printSizeAndType) {
    O << "\t.type " << name << ",`'__type_char_specifier__`'object\n";
    O << "\t.size " << name << ',' << Size << '\n';
  }

  O << name << ":\n";
  EmitGlobalConstant(C);
}

bool __arch__`'AsmPrinter::
doFinalization(Module &M)
{
  // Print out module-level global variables here.
  for (Module::const_global_iterator I = M.global_begin(),
         E = M.global_end(); I != E; ++I)
    printModuleLevelGV(I);
  O << '\n';

  return AsmPrinter::doFinalization(M);
}
