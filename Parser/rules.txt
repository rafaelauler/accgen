//===- rules.txt   Transformation rules definition file   -----------------===//
//
//              The ArchC Project - Compiler Backend Generation
//
//===----------------------------------------------------------------------===//
//
// BLABLA
//
//===----------------------------------------------------------------------===//

// Operators

define operator +        as arity 2;
define operator -        as arity 2;
define operator transfer as arity 2;
define operator if       as arity 3;
define operator equal    as arity 2;
define operator dec      as arity 2;
define operator alias    as add => +;
define operator alias    as sub => -;


// Operands

define operand int   as size 32;
define operand regs  as size 32 like int;
define operand short as size 16 like int;
define operand byte  as size 8  like int;
define operand bit   as size 1  like int;

// Rules

AnyOperator:any => (dec (transfer AReg:regs AnyOperator:any) AReg:regs);

(+ const:int:2 const:int:2) 
 =>
const:int:4;

//(transfer a4:regs (+ a1:regs (+ a2:regs a3:regs))) => 
//(dec (transfer t4:regs (+ t4:regs const:int:0)) (+ a2:

(sub const:int:2 const:int:2)
 <=>
const:int:0;

// Machine description

define registers GPR:regs as (
  r0  r1  r2  r3  r4  r5  r6  r7  r8  r9  r10 r11 r12 r13 r14 r15
  r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 r30 r31
);

// Current Program Status Register

define registers CPSRbitN:bit as ( N );  // bit Negative
define registers CPSRbitV:bit as ( V );  // bit Overflow
define registers CPSRbitZ:bit as ( Z );  // bit Zero
define registers CPSRbitC:bit as ( C );  // bit Carry

define instruction add semantic as (

  (transfer Op3:GPR (+ Op1:GPR Op2:GPR));

  (transfer Z:CPSRbitZ (if (equal Op3:GPR const:int:0 ) const:bit:0 
     const:bit:1 ) );

//  (transfer V:
) cost 1;

translate (transfer a3:int (+ a1:int a2:int));

//translate (transfer a3:int (+ a1:int a2:int));
