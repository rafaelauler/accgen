//===- rules.txt   Transformation rules definition file   -----------------===//
//
//              The ArchC Project - Compiler Backend Generation
//
//===----------------------------------------------------------------------===//
//
// BLABLA
//
//===----------------------------------------------------------------------===//

//==========================-- Operators --===================================//

// Built-in operators: +, -, ~, transfer, dec, call, ret, memref, jump, cjump,
//                     jumpnz, nop, pcrelative
// These operands must exist
define operator +        as arity 2;
define operator -        as arity 2;
define operator *        as arity 2;
define operator sdiv     as arity 2;
define operator udiv     as arity 2;
define operator srem     as arity 2;
define operator urem     as arity 2;
define operator ~        as arity 1;
define operator mulhs    as arity 2;
define operator mulhu    as arity 2;
define operator xor      as arity 2;
define operator transfer as arity 2;
define operator zext     as arity 2;
define operator sext     as arity 2;
define operator trunc    as arity 2;
define operator if       as arity 3;
define operator equal    as arity 2;
define operator dec      as arity 2;
define operator shl      as arity 2;            // Shift left
define operator shr      as arity 2;            // Shift right
define operator asr      as arity 2;            // Arithmetic shift right
define operator rol      as arity 2;            // Rotate left
define operator ror      as arity 2;            // Rotate right
define operator and      as arity 2;
define operator or       as arity 2;
//NOTE: MemRef is a special case not affected by wildcard rules
define operator memref   as arity 1;
define operator call     as arity 1;
define operator ret      as arity 0;
define operator jump     as arity 1;
// CJUMP is a special conditional jump node and is not straightforward
// The first operand has the conditional code, the second is the
// comparator operator and the third, the target
define operator cjump    as arity 3;
define operator comp     as arity 2;
//JUMPNZ is a special conditional jump node which jumps to the address
//in operand 2 iff operand 1 is not zero.
//SETIF sets its results to 1 if condition in operand 1 is observed
// in operand 2 compared to operator 3.
define operator jumpnz   as arity 2;
define operator setif    as arity 3;
//NOP is a built-in special operator which does no effect.
define operator nop      as arity 0;
// Operator pcrelative adds an operand to the PROGRAM COUNTER value.
// Its main usage is to take advantage of PC-relative addressing.
define operator pcrelative as arity 1;
define operator alias    as add => +;
define operator alias    as sub => -;


//===========================-- Operands --===================================//

// Built-in operands: int, tgtimm
// These operands must exist
define operand int    as size 32;
define operand mem    as size 32;
define operand cond   as size 32;
define operand tgtimm as size 32 like int;
define operand regs   as size 32 like int;
define operand short  as size 16 like int;
define operand byte   as size 8  like int;
define operand nibble as size 4  like int;
define operand bit    as size 1  like int;

//============================-- Rules --=====================================//

//NOTE: The system does not chain 2 or more rules to the same node
// (When a rule is applied, it is able to transform its children, not the root
//  anymore, so 2 rules are never chained to the same node). Change this? May
//  increase search times and cause infinite loops. - NOT if each rule
//  application increases the search depth, which is limited.

//AnyOperator:any <=> (+ const:int:0 AnyOperator:any);

AnyOperator:any => (dec (transfer AReg:regs^ AnyOperator:any) AReg:regs^);

(transfer (memref AnyOperator1:any) (memref AnyOperator2:any)) => 
  (dec (transfer AReg:regs (memref AnyOperator2:any)) (transfer (memref AnyOperator1:any) AReg:regs));
  
  //(transfer a3:regs (* a1:regs a2:regs));
(transfer DestReg:regs AnyOperator:any) => 
  (dec (transfer AReg:regs^ AnyOperator:any) (transfer DestReg:regs AReg:regs^) );
  

(cjump CondOp:any (comp lhs:any rhs:any) tgt:any) =>
  (jumpnz (setif CondOp:any lhs:any rhs:any) tgt:any);
  
(cjump const:cond:gt (comp lhs:regs rhs:regs) imm:tgt:int) =>
  (jumpnz (setif const:cond:lt rhs:regs (+ lhs:regs const:byte:1)) imm:tgt:int);
  
(cjump const:cond:ge (comp lhs:regs rhs:regs) imm:tgt:int) =>
  (jumpnz (setif const:cond:lt rhs:regs lhs:regs) imm:tgt:int);
  
(cjump const:cond:le (comp lhs:regs rhs:regs) imm:tgt:int) =>
  (jumpnz (setif const:cond:lt lhs:regs (+ rhs:regs const:byte:1)) imm:tgt:int);
  
(cjump const:cond:ugt (comp lhs:regs rhs:regs) imm:tgt:int) =>
  (jumpnz (setif const:cond:ult rhs:regs (+ lhs:regs const:byte:1)) imm:tgt:int);
  
(cjump const:cond:ule (comp lhs:regs rhs:regs) imm:tgt:int) =>
  (jumpnz (setif const:cond:ult lhs:regs (+ rhs:regs const:byte:1)) imm:tgt:int);
  
(cjump const:cond:uge (comp lhs:regs rhs:regs) imm:tgt:int) =>
  (jumpnz (setif const:cond:ult rhs:regs lhs:regs) imm:tgt:int);
  
(cjump const:cond:uge (comp lhs:regs rhs:regs) imm:tgt:int) =>
  (cjump const:cond:ule (comp rhs:regs (- lhs:regs const:byte:1)) imm:tgt:int);
  
(cjump const:cond:ult (comp lhs:regs rhs:regs) imm:tgt:int) =>
  (cjump const:cond:ule (comp lhs:regs (- rhs:regs const:byte:1)) imm:tgt:int);

//(cjump const:cond:gt (comp lhs:regs rhs:regs) imm:tgt:int) =>
//  (cjump const:cond:le (comp rhs:regs lhs:regs) imm:tgt:int);

//(cjump const:cond:gt (comp lhs:regs rhs:regs) imm:tgt:int) =>
//  (cjump const:cond:lt (comp rhs:regs (+ lhs:regs const:byte:1)) imm:tgt:int);
  
//(cjump const:cond:ge (comp lhs:regs rhs:regs) imm:tgt:int) =>
//  (cjump const:cond:lt (comp rhs:regs lhs:regs) imm:tgt:int);
  
//(cjump const:cond:le (comp lhs:regs rhs:regs) imm:tgt:int) =>
//  (cjump const:cond:lt (comp lhs:regs (+ rhs:regs const:byte:1)) imm:tgt:int);
  
//(cjump const:cond:ugt (comp lhs:regs rhs:regs) imm:tgt:int) =>
//  (cjump const:cond:ule (comp rhs:regs lhs:regs) imm:tgt:int);
  
//(cjump const:cond:ule (comp lhs:regs rhs:regs) imm:tgt:int) =>
//  (cjump const:cond:ult (comp lhs:regs (+ rhs:regs const:byte:1)) imm:tgt:int);
  
//(cjump const:cond:uge (comp lhs:regs rhs:regs) imm:tgt:int) =>
//  (cjump const:cond:ult (comp rhs:regs lhs:regs) imm:tgt:int);

//const:int:0 => (xor Reg:regs Reg:regs);

// expansion rules
(rol child1:any child2:any) => 
  (or (shl child1:any child2:any) (shr child1:any (- const:byte:32 child2:any)));
  
(ror child1:any child2:any) => 
  (or (shr child1:any child2:any) (shl child1:any (- const:byte:32 child2:any)));

// split large immediate rule
imm:oper:int => (dec (transfer AReg:regs (+ (shl imm:op1:short const:byte:16) imm:op2:short)) AReg:regs)
( oper binds to op1 using "oper >> 16";
  oper binds to op2 using "oper & 0xFFFF";
);
imm:oper:short => (dec (transfer AReg:regs (+ (shl imm:op1:byte const:byte:8) imm:op2:byte)) AReg:regs)
( oper binds to op1 using "oper >> 8";
  oper binds to op2 using "oper & 0xFF";
);

(pcrelative aa:any) => (+ (getpc) aa:any);

//=========================-- LLVM Patterns --================================//

// It is important to order similar patterns, most restrictive first.

//define pattern STOREADDFICONST as (
//  "(store (imm i32:$src), (add i32:$a1 (frameindex i32:$val)))";
//  (transfer (memref (+ a1:regs (+ val:regs imm:val:immed))) imm:src:immed);
//);

define pattern STORETRUNC8 as (
  "(truncstorei8 i32:$src, i32:$addr)";
  (transfer (memref addr:regs) (trunc src:regs const:num:8));
);

define pattern STORETRUNC16 as (
  "(truncstorei16 i32:$src, i32:$addr)";
  (transfer (memref addr:regs) (trunc src:regs const:num:16));
);

define pattern STOREFICONST as (
  "(store (tgtimm i32:$src), (frameindex i32:$val))";
  (transfer (memref (+ val:regs imm:val:tgtimm)) imm:src:tgtimm);
);

// INCORRECT PATTERN ??
//define pattern STOREFROMFI as (
//  "(store (frameindex i32:$valsrc) i32:$addr)";
//  (transfer (memref addr:regs) 
    //(memref (+ valsrc:regs imm:valsrc:tgtimm)));
//);

// Built-in pattern: STOREFI is used to determine how the backend will spill
// registers to stack frame. This pattern must exist, with the correct
// operand names (src and val).
define pattern STOREFI as (
  "(store i32:$src, (frameindex i32:$val))";
  (transfer (memref (+ val:regs imm:val:tgtimm)) src:regs);
);

// Built-in pattern: STOREADDCONST is used to help emit prologue
define pattern STOREADDCONST as (
  "(store i32:$src, (add i32:$a1, (tgtimm i32:$a2)))";
  (transfer (memref (+ a1:regs imm:a2:tgtimm)) src:regs);
);

// Built-in pattern: STOREADD is used to help handle large frameindexes
define pattern STOREADD as (
  "(store i32:$src, (add i32:$reg1, i32:$reg2))";
  (transfer (memref (+ reg1:regs reg2:regs)) src:regs);
);

define pattern STORE as (
  "(store i32:$src, i32:$addr)";
  (transfer (memref addr:regs) src:regs);
);

define pattern LOADSEXT8 as (
  "(loadsexti8 i32:$addr)";
  (transfer a3:regs (sext (memref addr:regs) const:num:8));
);

define pattern LOADSEXT16 as (
  "(loadsexti16 i32:$addr)";
  (transfer a3:regs (sext (memref addr:regs) const:num:16));
);

define pattern LOADZEXT8 as (
  "(loadzexti8 i32:$addr)";
  (transfer a3:regs (zext (memref addr:regs) const:num:8));
);

define pattern LOADZEXT16 as (
  "(loadzexti16 i32:$addr)";
  (transfer a3:regs (zext (memref addr:regs) const:num:16));
);

// Built-in pattern: LOADFI is used to determine how the backend will load
// spilled registers from stack frame. This pattern must exist, with the
// correct operand names (addr and dest).
define pattern LOADFI as (
  "(load (frameindex i32:$addr))";
  (transfer dest:regs (memref (+ addr:regs imm:addr:tgtimm)));
);

// Built-in pattern: LOADADDCONST is used to help emit epilogue
define pattern LOADADDCONST as (
  "(load (add i32:$a1, (tgtimm i32:$a2)))";
  (transfer dest:regs (memref (+ a1:regs imm:a2:tgtimm)));
);

// Built-in pattern: LOADADD is used to help handle large frameindexes
define pattern LOADADD as (
  "(load (add i32:$reg1, i32:$reg2))";
  (transfer dest:regs (memref (+ reg1:regs reg2:regs)));
);

define pattern LOAD as (
  "(load i32:$addr)";
  (transfer a3:regs (memref addr:regs));
);

// Built-in pattern: GLOBALADDRESS defines how the target architecture
// discover the current instruction address and how to handle global values
// contants.
define pattern GLOBALADDRESS as (
  "(globaladdr i32:$addr)";
//  (transfer a3:regs (memref (+ addr:regs imm:addr:short)));
  (transfer a3:regs (memref (pcrelative imm:addr:short)));
);

// Built-int pattern: FRAMEINDEX is used to identify frameindexes
// accesses and adjust the immediates
define pattern FRAMEINDEX as (
  "(frameindex i32:$addr)";
  (transfer a3:regs (+ addr:regs imm:addr:tgtimm));
);

define pattern CALL as (
  "(call (tglobaladdr i32:$tgt))";
  (call imm:tgt:int);
);

define pattern CALL2 as (
  "(call (texternalsymbol i32:$tgt))";
  (call imm:tgt:int);
);

define pattern CALL3 as (
  "(call i32:$tgt)";
  (call tgt:regs);
);

// Built-in pattern: ADDCONST is used to adjust stack when target-immediate
// size values are used.
define pattern ADDCONST as (
  "(add i32:$a1, (tgtimm i32:$a2))";
  (transfer a3:regs (+ a1:regs imm:a2:tgtimm));
);

// Built-in pattern: ADD is used to adjust stack when large immediates
// are loaded into one register
define pattern ADD as (
  "(add i32:$a1, i32:$a2)";
  (transfer a3:regs (+ a1:regs a2:regs));
);

// Built-in pattern: SUBCONST is used to adjust stack when target-immediate
// size values are used.
define pattern SUBCONST as (
  "(sub i32:$a1, (tgtimm i32:$a2))";
  (transfer a3:regs (- a1:regs imm:a2:tgtimm));
);

// Built-in pattern: SUB is used to adjust stack when large immediates
// are loaded into one register
define pattern SUB as (
  "(sub i32:$a1, i32:$a2)";
  (transfer a3:regs (- a1:regs a2:regs));
);

define pattern MUL as (
  "(mul i32:$a1, i32:$a2)";
  (transfer a3:regs (* a1:regs a2:regs));
);

define pattern MULHS as (
  "(mulhs i32:$a1, i32:$a2)";
  (transfer a3:regs (mulhs a1:regs a2:regs));
);

define pattern MULHU as (
  "(mulhu i32:$a1, i32:$a2)";
  (transfer a3:regs (mulhu a1:regs a2:regs));
);

//define pattern SDIV as (
//  "(sdiv i32:$a1, i32:$a2)";
//  (transfer a3:regs (sdiv a1:regs a2:regs));
//);

//define pattern UDIV as (
//  "(udiv i32:$a1, i32:$a2)";
//  (transfer a3:regs (udiv a1:regs a2:regs));
//);

//define pattern SREM as (
//  "(srem i32:$a1, i32:$a2)";
//  (transfer a3:regs (srem a1:regs a2:regs));
//);

//define pattern UREM as (
//  "(urem i32:$a1, i32:$a2)";
//  (transfer a3:regs (urem a1:regs a2:regs));
//);

define pattern SHLCONST as (
  "(shl i32:$a1, (tgtimm i32:$a2))";
  (transfer a3:regs (shl a1:regs imm:a2:tgtimm));
);

define pattern SHRCONST as (
  "(srl i32:$a1, (tgtimm i32:$a2))";
  (transfer a3:regs (shr a1:regs imm:a2:tgtimm));
);

define pattern SRACONST as (
  "(sra i32:$a1, (tgtimm i32:$a2))";
  (transfer a3:regs (asr a1:regs imm:a2:tgtimm));
);

define pattern ROLCONST as (
  "(rotl i32:$a1, (tgtimm i32:$a2))";
  (transfer a3:regs (rol a1:regs imm:a2:tgtimm));
);

define pattern RORCONST as (
  "(rotr i32:$a1, (tgtimm i32:$a2))";
  (transfer a3:regs (ror a1:regs imm:a2:tgtimm));
);

define pattern SHL as (
  "(shl i32:$a1, i32:$a2)";
  (transfer a3:regs (shl a1:regs a2:regs));
);

define pattern SHR as (
  "(srl i32:$a1, i32:$a2)";
  (transfer a3:regs (shr a1:regs a2:regs));
);

define pattern SRA as (
  "(sra i32:$a1, i32:$a2)";
  (transfer a3:regs (asr a1:regs a2:regs));
);

define pattern ROL as (
  "(rotl i32:$a1, i32:$a2)";
  (transfer a3:regs (rol a1:regs a2:regs));
);

define pattern ROR as (
  "(rotr i32:$a1, i32:$a2)";
  (transfer a3:regs (ror a1:regs a2:regs));
);

define pattern OR as (
  "(or i32:$a1, i32:$a2)";
  (transfer a3:regs (or a1:regs a2:regs));
);

define pattern AND as (
  "(and i32:$a1, i32:$a2)";
  (transfer a3:regs (and a1:regs a2:regs));
);

define pattern XOR as (
  "(xor i32:$a1, i32:$a2)";
  (transfer a3:regs (xor a1:regs a2:regs));
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND as (
  "(br_cc (condcode SETLT) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:lt (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND2 as (
  "(br_cc (condcode SETGT) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:gt (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND3 as (
  "(br_cc (condcode SETLE) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:le (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND4 as (
  "(br_cc (condcode SETGE) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:ge (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND5 as (
  "(br_cc (condcode SETULT) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:ult (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND6 as (
  "(br_cc (condcode SETUGT) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:ugt (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND7 as (
  "(br_cc (condcode SETUGE) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:uge (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND8 as (
  "(br_cc (condcode SETULE) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:ule (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND9 as (
  "(br_cc (condcode SETNE) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:ne (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in select_cc pseudo scheduler expansion
define pattern BRCOND10 as (
  "(br_cc (condcode SETEQ) i32:$lhs i32:$rhs (basicblock i32:$tgt))";
  (cjump const:cond:eq (comp lhs:regs rhs:regs) imm:tgt:int);
);

// Built-in pattern: Used in XXXInstrInfo::InsertBranch member function
define pattern BR as (
  "(br (basicblock i32:$tgt))";
  (jump imm:tgt:int);
);

define pattern BRIND as (
  "(brind i32:$tgt)";
  (jump tgt:regs);
);

//define pattern JUMPTABLE as (
  //"(jumptable i32:$addr)";
  //(transfer a3:regs (memref (+ addr:regs imm:addr:short)));
  //(transfer a3:regs imm:addr:tgtimm);
//);

define pattern CONST as (
  "(tgtimm i32:$a1)";
  (transfer a2:regs imm:a1:tgtimm);
);

// Built-in pattern: CONST16 is used to load a 16-bit immediate when ordinary
// patterns cannot, or when generating code that creates large immediates.
define pattern CONST16 as (
  "(shortimm i32:$a1)";
  (transfer a2:regs imm:a1:short);
);

// Built-in pattern: CONST32 is used to load large immediates (32-bit), similar
// to CONST16, but 32-bit in size.
define pattern CONST32 as (
  "(imm i32:$a1)";
  (transfer a2:regs imm:a1:int);
);

//define pattern SIGNEXTENDINREG as (
//  "(sign_extend_inreg i32:$a1)";
//  (transfer a3:regs (- a1:regs a2:regs));
//);

