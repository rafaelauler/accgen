/*
//===- acllvm.l -  Flex input file for scanner generation -----------------===//
//
//              The ArchC Project - Compiler Backend Generation
//
//===----------------------------------------------------------------------===//
//
// This flex input file is used to build a scanner for tokens used in the   
// bison generated parser (generated using input file acllvm.y).          
//
//===----------------------------------------------------------------------===//
*/

%{
#include "InsnSelector/TransformationRules.h"
#include "InsnSelector/Semantic.h"
#include "acllvm.tab.h" /* Generated by bison */
using namespace backendgen::expression;
extern int LineNumber;
%}

%option bison-bridge bison-locations
%x COMMENT1
%x COMMENT2

%option noyywrap

DIGIT [0-9]
IDENT [a-zA-Z][a-zA-Z0-9]*

%%

 int return_state;

<INITIAL>"/*" {
  return_state = YY_START;
  BEGIN(COMMENT1);
}

<INITIAL>"//" {
  return_state = YY_START;
  BEGIN(COMMENT2);
}

<INITIAL>"define" {
  /* Reserved words go first */

  yylval->num = 0;
  return DEFINE;
}

<INITIAL>"semantic" {
  yylval->num = 0;
  return SEMANTIC;
}

<INITIAL>"pattern" {
  yylval->num = 0;
  return PATTERN;
}

<INITIAL>"fragment" {
  yylval->num = 0;
  return FRAGMENT;
}

<INITIAL>"abi" {
  yylval->num = 0;
  return ABI;
}

<INITIAL>"callee" {
  yylval->num = 0;
  return CALLEE;
}

<INITIAL>"calling" {
  yylval->num = 0;
  return CALLING;
}

<INITIAL>"save" {
  yylval->num = 0;
  return SAVE;
}

<INITIAL>"params" {
  yylval->num = 0;
  return PARAMETERS;
}

<INITIAL>"reserved" {
  yylval->num = 0;
  return RESERVED;
}

<INITIAL>"instruction" {
  yylval->num = 0;
  return INSTRUCTION;
}

<INITIAL>"return" {
  yylval->num = 0;
  return RETURN;
}

<INITIAL>"convention" {
  yylval->num = 0;
  return CONVENTION;
}

<INITIAL>"for" {
  yylval->num = 0;
  return FOR;
}

<INITIAL>"translate" {
  yylval->num = 0;
  return TRANSLATE;
}

<INITIAL>"registers" {
  yylval->num = 0;
  return REGISTERS;
}

<INITIAL>"register" {
  yylval->num = 0;
  return REGISTER;
}

<INITIAL>"programcounter" {
  yylval->num = 0;
  return PROGRAMCOUNTER;
}

<INITIAL>"imm" {
  yylval->num = 0;
  return IMM;
}

<INITIAL>"as" {
  yylval->num = 0;
  return AS;
}

<INITIAL>"operator" {
  yylval->num = 0;
  return OPERATOR2;
}

<INITIAL>"arity" {
  yylval->num = 0;
  return ARITY;
}

<INITIAL>"alias" {
  yylval->num = 0;
  return ALIAS;
}

<INITIAL>"any" {
  yylval->num = 0;
  return ANY;
}

<INITIAL>"operand" {
  yylval->num = 0;
  return OPERAND;
}

<INITIAL>"size" {
  yylval->num = 0;
  return SIZE;
}

<INITIAL>"stack" {
  yylval->num = 0;
  return STACK;
}

<INITIAL>"alignment" {
  yylval->num = 0;
  return ALIGNMENT;
}

<INITIAL>"const" {
  yylval->num = 0;
  return CONST;
}

<INITIAL>"cost" {
  yylval->num = 0;
  return COST;
}

<INITIAL>"like" {
  yylval->num = 0;
  return LIKE;
}

<INITIAL>"in" {
  yylval->num = 0;
  return IN;
}

<INITIAL>"let" {
  yylval->num = 0;
  return LET;
}

<INITIAL>";" {

  /* Some small tokens */

  yylval->num = 0;
  return SEMICOLON;
}

<INITIAL>":" {
  yylval->num = 0;
  return COLON;
}

<INITIAL>"{" {
  yylval->num = 0;
  return LBRACE;
}

<INITIAL>"}" {
  yylval->num = 0;
  return RBRACE;
}


<INITIAL>"(" {
  yylval->num = 0;
  return LPAREN;
}

<INITIAL>")" {
  yylval->num = 0;
  return RPAREN;
}

<INITIAL>"," {
  yylval->num = 0;
  return COMMA;
}

<INITIAL>"=>" {
  yylval->num = 0;
  return LEADSTO;
}

<INITIAL>"->" {
  yylval->num = 0;
  return LEADSTO2;
}

<INITIAL>"<=>" {
  yylval->num = 0;
  return EQUIVALENCE;
}

<INITIAL>"==" {
  yylval->num = EqualityComp;
  return EQUALS;
}

<INITIAL>"<" {
  yylval->num = LessThanComp;
  return LESS;
}

<INITIAL>">" {
  yylval->num = GreaterThanComp;
  return GREATER;
}

<INITIAL>"<=" {
  yylval->num = LessOrEqualComp;
  return LESSOREQUAL;
}

<INITIAL>">=" {
  yylval->num = GreaterOrEqualComp;
  return GREATEROREQUAL;
}

<INITIAL>"=" {
  yylval->num = 0;
  return ASSIGN;
}

<INITIAL>{DIGIT}+ {

  /* Some patterns */

  yylval->num = atoi(yytext);
  return NUM;
}

<INITIAL>\"[^\n\"]*\" {
  yylval->str = strdup(yytext);
  return QUOTEDSTR;
}

<INITIAL>{IDENT} {
  yylval->str = strdup(yytext);
  return ID;
}

<INITIAL>[^ \t\n\r\"\,\(\)\:\;\/\{\}]+ {
  yylval->str = strdup(yytext);
  return OPERATOR;
}
<INITIAL>\n {
  ++LineNumber;
}

<INITIAL>[" "\t\r] {} 

<COMMENT1>"*/" {
  BEGIN(return_state);
}

<COMMENT1>\n {
  ++LineNumber;
}

<COMMENT1>. {}

<COMMENT2>\n {
  ++LineNumber;
  BEGIN(return_state);
}

<COMMENT2>. {}


%%