/*
//===- acllvm.l -  Flex input file for scanner generation -----------------===//
//
//              The ArchC Project - Compiler Backend Generation
//
//===----------------------------------------------------------------------===//
//
// This flex input file is used to build a scanner for tokens used in the   
// bison generated parser (generated using input file acllvm.y).          
//
//===----------------------------------------------------------------------===//
*/

%{
#include "InsnSelector/TransformationRules.h"
#include "InsnSelector/Semantic.h"
#include "acllvm.tab.h" /* Generated by bison */
extern int LineNumber;
%}

%option bison-bridge bison-locations
%x COMMENT1
%x COMMENT2

%option noyywrap

DIGIT [0-9]
IDENT [a-zA-Z][a-zA-Z0-9]*

%%

 int return_state;

<INITIAL>"/*" {
  return_state = YY_START;
  BEGIN(COMMENT1);
}

<INITIAL>"//" {
  return_state = YY_START;
  BEGIN(COMMENT2);
}

<INITIAL>"define" {
  /* Reserved words go first */

  yylval->num = 0;
  return DEFINE;
}

<INITIAL>"semantic" {
  yylval->num = 0;
  return SEMANTIC;
}

<INITIAL>"instruction" {
  yylval->num = 0;
  return INSTRUCTION;
}

<INITIAL>"translate" {
  yylval->num = 0;
  return TRANSLATE;
}

<INITIAL>"registers" {
  yylval->num = 0;
  return REGISTERS;
}

<INITIAL>"imm" {
  yylval->num = 0;
  return IMM;
}

<INITIAL>"as" {
  yylval->num = 0;
  return AS;
}

<INITIAL>"operator" {
  yylval->num = 0;
  return OPERATOR2;
}

<INITIAL>"arity" {
  yylval->num = 0;
  return ARITY;
}

<INITIAL>"alias" {
  yylval->num = 0;
  return ALIAS;
}

<INITIAL>"any" {
  yylval->num = 0;
  return ANY;
}

<INITIAL>"operand" {
  yylval->num = 0;
  return OPERAND;
}

<INITIAL>"size" {
  yylval->num = 0;
  return SIZE;
}

<INITIAL>"const" {
  yylval->num = 0;
  return CONST;
}

<INITIAL>"cost" {
  yylval->num = 0;
  return COST;
}

<INITIAL>"like" {
  yylval->num = 0;
  return LIKE;
}

<INITIAL>";" {

  /* Some small tokens */

  yylval->num = 0;
  return SEMICOLON;
}

<INITIAL>":" {
  yylval->num = 0;
  return COLON;
}

<INITIAL>"(" {
  yylval->num = 0;
  return LPAREN;
}

<INITIAL>")" {
  yylval->num = 0;
  return RPAREN;
}

<INITIAL>"," {
  yylval->num = 0;
  return COMMA;
}

<INITIAL>"=>" {
  yylval->num = 0;
  return LEADSTO;
}

<INITIAL>"<=>" {
  yylval->num = 0;
  return EQUIVALENCE;
}

<INITIAL>{DIGIT}+ {

  /* Some patterns */

  yylval->num = atoi(yytext);
  return NUM;
}

<INITIAL>{IDENT} {
  yylval->str = strdup(yytext);
  return ID;
}

<INITIAL>[^ \t\n\r\(\)\:\;\/]+ {
  yylval->str = strdup(yytext);
  return OPERATOR;
}
<INITIAL>\n {
  ++LineNumber;
}

<INITIAL>[" "\t\r] {} 

<COMMENT1>"*/" {
  BEGIN(return_state);
}

<COMMENT1>\n {
  ++LineNumber;
}

<COMMENT1>. {}

<COMMENT2>\n {
  ++LineNumber;
  BEGIN(return_state);
}

<COMMENT2>. {}


%%